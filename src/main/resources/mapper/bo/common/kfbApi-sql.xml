<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loanscrefia.common.common.repository.KfbApiRepository">

	<!-- API_LOG 등록 -->
	<select id="insertNewKfbApiLog" parameterType="kfbApi" resultType="int">
		INSERT INTO tb_lc_kfb_api_log
		(
			 TOKEN
			,URL
			,SEND_DATA
			,SEND_USER
			,SEND_TIMESTAMP
		)
		VALUES
		(
			 #{token}
			,#{url}
			,#{sendData}
			,#{regSeq}
			,NOW()
		)
		RETURNING API_SEQ AS apiSeq
	</select>
	
	<!-- API_LOG 수정(결과값) -->
	<update id="updateNewKfbApiLog" parameterType="kfbApi">
		UPDATE tb_lc_kfb_api_log
		SET
			RES_YN 			= #{resYn}
			, RES_CON_CODE	= #{resConCode}
			, RES_EXP_MSG 	= #{resExpMsg}
			, RES_CODE 		= #{resCode}
			, RES_MSG 		= #{resMsg}
			, RES_DATA 		= #{resData}
			, RES_TIMESTAMP = NOW()
		WHERE
			API_SEQ = #{apiSeq} 
	</update>


	<!-- 요청 이력 등록 -->
	<insert id="insertKfbApiReqLog" parameterType="kfbApi">
		INSERT INTO TB_LC_KFB_REQ
		(
			 TOKEN
			,URL
			,SEND_DATA
			,SEND_USER
			,SEND_TIMESTAMP
		)
		VALUES
		(
			 #{token}
			,#{url}
			,#{sendData}
			,#{regSeq}
			,NOW()
		)
	</insert>
	
	<!-- 응답 이력 등록 -->
	<insert id="insertKfbApiResLog" parameterType="kfbApi">
		INSERT INTO TB_LC_KFB_RES
		(
			 TOKEN
			,URL
			,RES_CODE
			,RES_MSG
			,RES_DATA
			,RES_TIMESTAMP
		)
		VALUES
		(
			 #{token}
			,#{url}
			,#{resCode}
			,#{resMsg}
			,#{resData}
			,NOW()
		)
	</insert>
	
	<!-- 은행연합회 토큰 저장 -->
	<insert id="insertKfbApiKey" parameterType="kfbApi">
   		INSERT INTO KFB_API_KEY
   		VALUES(
   			 TO_CHAR(NOW(),'YYYYMMDD')
   			,#{token}
   			,NOW()
   		)
	</insert>
	
	<!-- 은행연합회 토큰 수정 -->
	<insert id="updateKfbApiKey" parameterType="kfbApi">
   		update KFB_API_KEY
   		set
   			key = #{token}
   			, reg_timestamp = NOW()
   		WHERE
   			ins_dt = TO_CHAR(NOW(),'YYYYMMDD')
	</insert>
	
	
	<!-- 은행연합회 토큰 조회 -->
	<select id="selectKfbApiKey" resultType="string">
		SELECT
			KEY
		FROM KFB_API_KEY
		WHERE INS_DT = TO_CHAR(NOW(),'YYYYMMDD')
		ORDER BY reg_timestamp DESC
		LIMIT 1
	</select>
	
	<!-- 은행연합회에서 전달받은 등록번호 update -->
	<update id="updateKfbApiByUserInfo" parameterType="user">
		UPDATE TB_LC_MAS01
		SET
				 UPD_SEQ 		= #{updSeq}
				,UPD_TIMESTAMP 	= NOW()
			<if test="preLcNum != null and preLcNum != ''">
				,PRE_LC_NUM 	= #{preLcNum}
			</if>
			<if test="plRegistNo != null and plRegistNo != ''">
				,PL_REGIST_NO 	= #{plRegistNo}
			</if>
			<if test="conNum != null and conNum != ''">
				,CON_NUM 		= #{conNum}
			</if>
			
			<if test="plRegStat != null and plRegStat != ''">
				,PL_REG_STAT 	= #{plRegStat}
				<if test='plRegStat.equals("3")'>
					,CRE_LICENSE_DATE 	= TO_CHAR(NOW(),'YYYYMMDD')
				</if>
			</if>
		<where>
			AND MASTER_SEQ 	= #{masterSeq}
		</where>
	</update>
	
	<!-- API리스트 조회 -->
	<select id="selectApiList" parameterType="kfbApi" resultType="kfbApi">
   		SELECT 
   			<include refid="common.totalPages"/>
   			Z.*
   		FROM
   		(
			SELECT
				 INS_DT
				,KEY AS TOKEN
				,REG_TIMESTAMP
			FROM KFB_API_KEY
   		)Z
		<where>
			<if test="srchDate1 != null and srchDate1 != ''">
				AND Z.INS_DT <![CDATA[>=]]> #{srchDate1}::TIMESTAMP
			</if>
			<if test="srchDate2 != null and srchDate2 != ''">
				AND Z.INS_DT <![CDATA[<]]> #{srchDate2}::TIMESTAMP + INTERVAL '1 day'
			</if>
		</where>
   		<include refid="common.pageBottom"/>
	</select>
	
	
	<!-- 은행연합회 토큰 조회 -->
	<select id="selectNewKfbApiKey" resultType="string">
		SELECT
			KEY
		FROM KFB_API_KEY
		WHERE INS_DT = TO_CHAR(NOW(),'YYYYMMDD')
		ORDER BY REG_TIMESTAMP DESC
		LIMIT 1
	</select>
	
	
	<!-- API_LOG 등록 -->
	<select id="insertApiLog" parameterType="kfbApi" resultType="int">
		INSERT INTO tb_lc_kfb_api_log
		(
			 TOKEN
			,API_NAME
			,URL
			,SEND_DATA
			,SEND_USER
			,SEND_TIMESTAMP
		)
		VALUES
		(
			 #{token}
			,#{apiName}
			,#{url}
			,#{sendData}
			,#{regSeq}
			,NOW()
		)
		RETURNING API_SEQ AS apiSeq
	</select>
	
	<!-- API_LOG 수정(결과값) -->
	<update id="updateApiLog" parameterType="kfbApi">
		UPDATE tb_lc_kfb_api_log
		SET
			RES_YN 			= #{resYn}
			, RES_CON_CODE	= #{resConCode}
			, RES_EXP_MSG 	= #{resExpMsg}
			, RES_CODE 		= #{resCode}
			, RES_MSG 		= #{resMsg}
			, RES_DATA 		= #{resData}
			, RES_TIMESTAMP = NOW()
		WHERE
			API_SEQ = #{apiSeq} 
	</update>
	
	
</mapper> 