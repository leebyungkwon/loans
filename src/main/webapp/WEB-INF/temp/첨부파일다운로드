	//CommonController
  
  @PostMapping("/common/fileDown")
	public ResponseEntity<Resource> fileDown(@RequestParam String id, @RequestHeader("User-Agent") String userAgent, HttpServletRequest request,HttpServletResponse response) throws IOException {
		ResponseMsg responseMsg = new ResponseMsg(HttpStatus.OK ,null );
		FileDomain fileDomain = new FileDomain();
		fileDomain.setFileUid(id);

		fileDomain = (FileDomain) commonRepository.selectFile(fileDomain);
		String fileName = fileDomain.getFileUid()+ "." + fileDomain.getExt();
 		try {
 			Resource resource = resourceLoader.getResource("classpath:\\static\\upload\\"+fileDomain.getFilePath()+"\\"+ fileName);

 			File file = resource.getFile();	//파일이 없는 경우 fileNotFoundException error가 난다.

 			String orgfileName = fileDomain.getFileNm()+ "." + fileDomain.getExt();
			String downloadName = URLEncoder.encode(orgfileName,"UTF-8").replace("+", "%20");

 			return ResponseEntity.ok()
 					.header(HttpHeaders.CONTENT_DISPOSITION,"attachment; filename=" +downloadName+ ";filename*= UTF-8''" + orgfileName)	//다운 받아지는 파일 명 설정
 					.header("Content-Transfer-Encoding", "binary")
 					.header(HttpHeaders.CONTENT_LENGTH, String.valueOf(file.length()))	//파일 사이즈 설정
 					.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM.toString())	//바이너리 데이터로 받아오기 설정
 					.body(resource);	//파일 넘기기
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return ResponseEntity.badRequest()
					.body(null);
		} catch (Exception e ) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		//utilFile.setEntity(file).fileDownload(request,response);
	}
  
  
  //application.yml
  upload:
  filePath: static\upload
